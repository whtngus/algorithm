# 83.16
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        zero_index = -1
        multiplication_sum = 1
        nums_len = len(nums)
        for i, num in enumerate(nums):
            if num == 0:
                if zero_index != -1:
                    return [0] * nums_len
                zero_index = i
                continue
            multiplication_sum *= num
        if zero_index != -1:
            result = [0] * nums_len
            result[zero_index] = multiplication_sum
            return result
        return [int(multiplication_sum/nums[i]) for i in range(nums_len)]


# 90.68
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        zero_index = -1
        multiplication_sum = 1
        nums_len = len(nums)
        for i, num in enumerate(nums):
            if num == 0:
                if zero_index != -1:
                    return [0] * nums_len
                zero_index = i
                continue
            multiplication_sum *= num
        if zero_index != -1:
            result = [0] * nums_len
            result[zero_index] = multiplication_sum
            return result
        return [multiplication_sum//nums[i] for i in range(nums_len)]